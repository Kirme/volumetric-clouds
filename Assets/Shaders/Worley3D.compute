// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Parameters
int _TextureResolution;
int _CellResolution;
int _CellCount;

int _Channel;
float _Threshold;

StructuredBuffer<float3> _Points; // List of points to which we calculate distance
RWTexture3D<float4> _Result;

// Get the result if we are in the right color channel
float4 GetResult(float invertedMin) {
    float4 res = float4(
        _Channel == 0 ? invertedMin : 0,
        _Channel == 1 ? invertedMin : 0,
        _Channel == 2 ? invertedMin : 0,
        /*_Channel == 3 ? invertedMin : 0*/ 1
    );

    return res;
}

// Set the result to the correct channel
void SetResult(float min, uint3 id)
{
    // Want white spots w. black background
    float invertedMin = 1.0 - min;
    
    // Only draw color if we are above the threshold
    if (invertedMin < _Threshold)
        invertedMin = 0.0;
    
    // Set result to the correct channel
    _Result[id] += GetResult(invertedMin);
}

int WrapInt(int i) {
    if (i < 0)
        return i + _CellCount;
    if (i >= _CellCount)
        return i - _CellCount;
    return i;
}

int3 WrapCell(int3 cell) {
    cell.x = WrapInt(cell.x);
    cell.y = WrapInt(cell.y);
    cell.z = WrapInt(cell.z);
    
    return cell;
}

[numthreads(8,8,8)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    float3 pos = float3(id); // World position
    
    float3 cellDiv = pos / (float) _CellResolution;
    
    float3 cellCoord = floor(cellDiv); // Cell identifier
    float3 posInCell = float3(cellDiv - cellCoord); // Offset from cell
    
    float minDistance = 1.0; // Holds minimum distance to a feature point
    
    // Loop through -1 to +1 in each axis
    for (int x = -1; x <= 1; x++) {
        for (int y = -1; y <= 1; y++) {
            for (int z = -1; z <= 1; z++) {
                int3 currentCell = cellCoord + int3(x, y, z); // Cell we are looking at
                
                int3 wrappedCell = WrapCell(currentCell); // Cell when wrapped around
                
                // Get the index of the cell in the points list
                int cellIndex = wrappedCell.x + _CellCount * (wrappedCell.y + wrappedCell.z * _CellCount);
                
                // Check the position of the point
                float3 pointOffset = currentCell + _Points[cellIndex];
                
                // Check if distance to point is smallest
                float dist = distance(cellCoord + posInCell, pointOffset);
                minDistance = min(minDistance, dist);
            }
        }
    }
    
    // Set color based on smallest distance to point
    SetResult(minDistance, id);
}
